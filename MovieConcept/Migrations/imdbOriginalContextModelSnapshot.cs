// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieConcept;

#nullable disable

namespace MovieConcept.Migrations
{
    [DbContext(typeof(imdbOriginalContext))]
    partial class imdbOriginalContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MovieConcept.NameBasics", b =>
                {
                    b.Property<string>("NameId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nconst");

                    b.Property<int?>("BirthYear")
                        .HasColumnType("int")
                        .HasColumnName("birthYear");

                    b.Property<int?>("DeathYear")
                        .HasColumnType("int")
                        .HasColumnName("deathYear");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primaryName");

                    b.Property<string>("PrimaryProfession")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primaryProfession");

                    b.HasKey("NameId");

                    b.ToTable("name.basics");
                });

            modelBuilder.Entity("MovieConcept.TitleAkas", b =>
                {
                    b.Property<string>("TitleId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("titleId");

                    b.Property<byte?>("Ordering")
                        .HasColumnType("tinyint")
                        .HasColumnName("ordering");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("region");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.HasKey("TitleId");

                    b.ToTable("title.akas");
                });

            modelBuilder.Entity("MovieConcept.TitleBasics", b =>
                {
                    b.Property<string>("Tconst")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tconst");

                    b.Property<string>("Genres")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genres");

                    b.Property<string>("OriginalTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("originalTitle");

                    b.Property<string>("PrimaryTitle")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primaryTitle");

                    b.Property<int?>("RuntimeMinutes")
                        .HasColumnType("int")
                        .HasColumnName("runtimeMinutes");

                    b.Property<int?>("StartYear")
                        .HasColumnType("int")
                        .HasColumnName("startYear");

                    b.Property<string>("TitleType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("titleType");

                    b.HasKey("Tconst");

                    b.ToTable("title.basics");
                });

            modelBuilder.Entity("MovieConcept.TitlePrincipals", b =>
                {
                    b.Property<string>("Tconstt")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tconst");

                    b.Property<string>("Nconst")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nconst");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("category");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.HasKey("Tconstt", "Nconst");

                    b.HasIndex("Nconst");

                    b.ToTable("title.principals");
                });

            modelBuilder.Entity("MovieConcept.TitleRatings", b =>
                {
                    b.Property<string>("Tconstr")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tconst");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float")
                        .HasColumnName("averageRating");

                    b.Property<int?>("NumVotes")
                        .HasColumnType("int")
                        .HasColumnName("numVotes");

                    b.HasKey("Tconstr");

                    b.ToTable("title.ratings");
                });

            modelBuilder.Entity("MovieConcept.TitleAkas", b =>
                {
                    b.HasOne("MovieConcept.TitleBasics", "TitleBasics")
                        .WithMany("AlternateTitles")
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TitleBasics");
                });

            modelBuilder.Entity("MovieConcept.TitlePrincipals", b =>
                {
                    b.HasOne("MovieConcept.NameBasics", "NameBasics")
                        .WithMany()
                        .HasForeignKey("Nconst")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieConcept.TitleBasics", "TitleBasics")
                        .WithMany("Crew")
                        .HasForeignKey("Tconstt")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NameBasics");

                    b.Navigation("TitleBasics");
                });

            modelBuilder.Entity("MovieConcept.TitleRatings", b =>
                {
                    b.HasOne("MovieConcept.TitleBasics", "TitleBasics")
                        .WithMany("Ratings")
                        .HasForeignKey("Tconstr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TitleBasics");
                });

            modelBuilder.Entity("MovieConcept.TitleBasics", b =>
                {
                    b.Navigation("AlternateTitles");

                    b.Navigation("Crew");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
